//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 14 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var addAppointmentScreen: addAppointmentScreen { .init(source: .init(bundle: bundle, tableName: "AddAppointmentScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var detailsAppointmentScreen: detailsAppointmentScreen { .init(source: .init(bundle: bundle, tableName: "DetailsAppointmentScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var editAppointmentScreen: editAppointmentScreen { .init(source: .init(bundle: bundle, tableName: "EditAppointmentScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var errors: errors { .init(source: .init(bundle: bundle, tableName: "Errors", preferredLanguages: preferredLanguages, locale: locale)) }
    var filterScreen: filterScreen { .init(source: .init(bundle: bundle, tableName: "FilterScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var informationSubcscribeSheetScreen: informationSubcscribeSheetScreen { .init(source: .init(bundle: bundle, tableName: "InformationSubcscribeSheetScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var loginScreen: loginScreen { .init(source: .init(bundle: bundle, tableName: "LoginScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var profileScreen: profileScreen { .init(source: .init(bundle: bundle, tableName: "ProfileScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var registerScreen: registerScreen { .init(source: .init(bundle: bundle, tableName: "RegisterScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var searchScreen: searchScreen { .init(source: .init(bundle: bundle, tableName: "SearchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var serviceSelectionScreen: serviceSelectionScreen { .init(source: .init(bundle: bundle, tableName: "ServiceSelectionScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var settingsScreen: settingsScreen { .init(source: .init(bundle: bundle, tableName: "SettingsScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var startScreen: startScreen { .init(source: .init(bundle: bundle, tableName: "StartScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var yourServicesViewScreen: yourServicesViewScreen { .init(source: .init(bundle: bundle, tableName: "YourServicesViewScreen", preferredLanguages: preferredLanguages, locale: locale)) }

    func addAppointmentScreen(preferredLanguages: [String]) -> addAppointmentScreen {
      .init(source: .init(bundle: bundle, tableName: "AddAppointmentScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func detailsAppointmentScreen(preferredLanguages: [String]) -> detailsAppointmentScreen {
      .init(source: .init(bundle: bundle, tableName: "DetailsAppointmentScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func editAppointmentScreen(preferredLanguages: [String]) -> editAppointmentScreen {
      .init(source: .init(bundle: bundle, tableName: "EditAppointmentScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func errors(preferredLanguages: [String]) -> errors {
      .init(source: .init(bundle: bundle, tableName: "Errors", preferredLanguages: preferredLanguages, locale: locale))
    }
    func filterScreen(preferredLanguages: [String]) -> filterScreen {
      .init(source: .init(bundle: bundle, tableName: "FilterScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func informationSubcscribeSheetScreen(preferredLanguages: [String]) -> informationSubcscribeSheetScreen {
      .init(source: .init(bundle: bundle, tableName: "InformationSubcscribeSheetScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func loginScreen(preferredLanguages: [String]) -> loginScreen {
      .init(source: .init(bundle: bundle, tableName: "LoginScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func profileScreen(preferredLanguages: [String]) -> profileScreen {
      .init(source: .init(bundle: bundle, tableName: "ProfileScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func registerScreen(preferredLanguages: [String]) -> registerScreen {
      .init(source: .init(bundle: bundle, tableName: "RegisterScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func searchScreen(preferredLanguages: [String]) -> searchScreen {
      .init(source: .init(bundle: bundle, tableName: "SearchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func serviceSelectionScreen(preferredLanguages: [String]) -> serviceSelectionScreen {
      .init(source: .init(bundle: bundle, tableName: "ServiceSelectionScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func settingsScreen(preferredLanguages: [String]) -> settingsScreen {
      .init(source: .init(bundle: bundle, tableName: "SettingsScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func startScreen(preferredLanguages: [String]) -> startScreen {
      .init(source: .init(bundle: bundle, tableName: "StartScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func yourServicesViewScreen(preferredLanguages: [String]) -> yourServicesViewScreen {
      .init(source: .init(bundle: bundle, tableName: "YourServicesViewScreen", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.addAppointmentScreen` struct is generated, and contains static references to 11 localization keys.
    struct addAppointmentScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: You've successfully created new appointment
      ///
      /// Key: create_appointment_success
      ///
      /// Locales: en, ru
      var create_appointment_success: RswiftResources.StringResource { .init(key: "create_appointment_success", tableName: "AddAppointmentScreen", source: source, developmentValue: "You've successfully created new appointment", comment: nil) }

      /// en translation: Input client's name
      ///
      /// Key: input_client_name
      ///
      /// Locales: en, ru
      var input_client_name: RswiftResources.StringResource { .init(key: "input_client_name", tableName: "AddAppointmentScreen", source: source, developmentValue: "Input client's name", comment: nil) }

      /// en translation: Input name*
      ///
      /// Key: input_client_name_placeholder
      ///
      /// Locales: en, ru
      var input_client_name_placeholder: RswiftResources.StringResource { .init(key: "input_client_name_placeholder", tableName: "AddAppointmentScreen", source: source, developmentValue: "Input name*", comment: nil) }

      /// en translation: Select the date and time of recording
      ///
      /// Key: input_date
      ///
      /// Locales: en, ru
      var input_date: RswiftResources.StringResource { .init(key: "input_date", tableName: "AddAppointmentScreen", source: source, developmentValue: "Select the date and time of recording", comment: nil) }

      /// en translation: Select date
      ///
      /// Key: input_date_placeholder
      ///
      /// Locales: en, ru
      var input_date_placeholder: RswiftResources.StringResource { .init(key: "input_date_placeholder", tableName: "AddAppointmentScreen", source: source, developmentValue: "Select date", comment: nil) }

      /// en translation: Input client's phone
      ///
      /// Key: input_phone
      ///
      /// Locales: en, ru
      var input_phone: RswiftResources.StringResource { .init(key: "input_phone", tableName: "AddAppointmentScreen", source: source, developmentValue: "Input client's phone", comment: nil) }

      /// en translation: Input phone
      ///
      /// Key: input_phone_placeholder
      ///
      /// Locales: en, ru
      var input_phone_placeholder: RswiftResources.StringResource { .init(key: "input_phone_placeholder", tableName: "AddAppointmentScreen", source: source, developmentValue: "Input phone", comment: nil) }

      /// en translation: Save
      ///
      /// Key: save
      ///
      /// Locales: en, ru
      var save: RswiftResources.StringResource { .init(key: "save", tableName: "AddAppointmentScreen", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Select services
      ///
      /// Key: shoose_services
      ///
      /// Locales: en, ru
      var shoose_services: RswiftResources.StringResource { .init(key: "shoose_services", tableName: "AddAppointmentScreen", source: source, developmentValue: "Select services", comment: nil) }

      /// en translation: Success
      ///
      /// Key: success
      ///
      /// Locales: en, ru
      var success: RswiftResources.StringResource { .init(key: "success", tableName: "AddAppointmentScreen", source: source, developmentValue: "Success", comment: nil) }

      /// en translation: Add appointment
      ///
      /// Key: title_screen
      ///
      /// Locales: en, ru
      var title_screen: RswiftResources.StringResource { .init(key: "title_screen", tableName: "AddAppointmentScreen", source: source, developmentValue: "Add appointment", comment: nil) }
    }

    /// This `_R.string.detailsAppointmentScreen` struct is generated, and contains static references to 12 localization keys.
    struct detailsAppointmentScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Cancel appointment
      ///
      /// Key: cancel_appointment
      ///
      /// Locales: en, ru
      var cancel_appointment: RswiftResources.StringResource { .init(key: "cancel_appointment", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Cancel appointment", comment: nil) }

      /// en translation: Appointment cancelled
      ///
      /// Key: cancelled_status
      ///
      /// Locales: en, ru
      var cancelled_status: RswiftResources.StringResource { .init(key: "cancelled_status", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Appointment cancelled", comment: nil) }

      /// en translation: Change data
      ///
      /// Key: change_data
      ///
      /// Locales: en, ru
      var change_data: RswiftResources.StringResource { .init(key: "change_data", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Change data", comment: nil) }

      /// en translation: Client accepted
      ///
      /// Key: client_accepted
      ///
      /// Locales: en, ru
      var client_accepted: RswiftResources.StringResource { .init(key: "client_accepted", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Client accepted", comment: nil) }

      /// en translation: Appointment completed
      ///
      /// Key: completed_status
      ///
      /// Locales: en, ru
      var completed_status: RswiftResources.StringResource { .init(key: "completed_status", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Appointment completed", comment: nil) }

      /// en translation: Delete appointment
      ///
      /// Key: delete
      ///
      /// Locales: en, ru
      var delete: RswiftResources.StringResource { .init(key: "delete", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Delete appointment", comment: nil) }

      /// en translation: End of appointment:
      ///
      /// Key: end_time_appointment
      ///
      /// Locales: en, ru
      var end_time_appointment: RswiftResources.StringResource { .init(key: "end_time_appointment", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "End of appointment:", comment: nil) }

      /// en translation: Phone:
      ///
      /// Key: phone
      ///
      /// Locales: en, ru
      var phone: RswiftResources.StringResource { .init(key: "phone", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Phone:", comment: nil) }

      /// en translation: Services
      ///
      /// Key: services
      ///
      /// Locales: en, ru
      var services: RswiftResources.StringResource { .init(key: "services", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Services", comment: nil) }

      /// en translation: Appointment time: 
      ///
      /// Key: start_time_appointment
      ///
      /// Locales: en, ru
      var start_time_appointment: RswiftResources.StringResource { .init(key: "start_time_appointment", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Appointment time: ", comment: nil) }

      /// en translation: Success
      ///
      /// Key: status_change_success
      ///
      /// Locales: en, ru
      var status_change_success: RswiftResources.StringResource { .init(key: "status_change_success", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Success", comment: nil) }

      /// en translation: Appointment status changed successfully
      ///
      /// Key: status_change_success_message
      ///
      /// Locales: en, ru
      var status_change_success_message: RswiftResources.StringResource { .init(key: "status_change_success_message", tableName: "DetailsAppointmentScreen", source: source, developmentValue: "Appointment status changed successfully", comment: nil) }
    }

    /// This `_R.string.editAppointmentScreen` struct is generated, and contains static references to 11 localization keys.
    struct editAppointmentScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: You've successfully changed appointment information
      ///
      /// Key: change_appointment_success
      ///
      /// Locales: en, ru
      var change_appointment_success: RswiftResources.StringResource { .init(key: "change_appointment_success", tableName: "EditAppointmentScreen", source: source, developmentValue: "You've successfully changed appointment information", comment: nil) }

      /// en translation: Input client's name
      ///
      /// Key: input_client_name
      ///
      /// Locales: en, ru
      var input_client_name: RswiftResources.StringResource { .init(key: "input_client_name", tableName: "EditAppointmentScreen", source: source, developmentValue: "Input client's name", comment: nil) }

      /// en translation: Input name*
      ///
      /// Key: input_client_name_placeholder
      ///
      /// Locales: en, ru
      var input_client_name_placeholder: RswiftResources.StringResource { .init(key: "input_client_name_placeholder", tableName: "EditAppointmentScreen", source: source, developmentValue: "Input name*", comment: nil) }

      /// en translation: Select the date and time of recording
      ///
      /// Key: input_date
      ///
      /// Locales: en, ru
      var input_date: RswiftResources.StringResource { .init(key: "input_date", tableName: "EditAppointmentScreen", source: source, developmentValue: "Select the date and time of recording", comment: nil) }

      /// en translation: Select date
      ///
      /// Key: input_date_placeholder
      ///
      /// Locales: en, ru
      var input_date_placeholder: RswiftResources.StringResource { .init(key: "input_date_placeholder", tableName: "EditAppointmentScreen", source: source, developmentValue: "Select date", comment: nil) }

      /// en translation: Input client's phone
      ///
      /// Key: input_phone
      ///
      /// Locales: en, ru
      var input_phone: RswiftResources.StringResource { .init(key: "input_phone", tableName: "EditAppointmentScreen", source: source, developmentValue: "Input client's phone", comment: nil) }

      /// en translation: Input phone
      ///
      /// Key: input_phone_placeholder
      ///
      /// Locales: en, ru
      var input_phone_placeholder: RswiftResources.StringResource { .init(key: "input_phone_placeholder", tableName: "EditAppointmentScreen", source: source, developmentValue: "Input phone", comment: nil) }

      /// en translation: Save
      ///
      /// Key: save
      ///
      /// Locales: en, ru
      var save: RswiftResources.StringResource { .init(key: "save", tableName: "EditAppointmentScreen", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Select services
      ///
      /// Key: shoose_services
      ///
      /// Locales: en, ru
      var shoose_services: RswiftResources.StringResource { .init(key: "shoose_services", tableName: "EditAppointmentScreen", source: source, developmentValue: "Select services", comment: nil) }

      /// en translation: Success
      ///
      /// Key: success
      ///
      /// Locales: en, ru
      var success: RswiftResources.StringResource { .init(key: "success", tableName: "EditAppointmentScreen", source: source, developmentValue: "Success", comment: nil) }

      /// en translation: Edit appointment
      ///
      /// Key: title_screen
      ///
      /// Locales: en, ru
      var title_screen: RswiftResources.StringResource { .init(key: "title_screen", tableName: "EditAppointmentScreen", source: source, developmentValue: "Edit appointment", comment: nil) }
    }

    /// This `_R.string.errors` struct is generated, and contains static references to 34 localization keys.
    struct errors {
      let source: RswiftResources.StringResource.Source

      /// en translation: Appointment change error
      ///
      /// Key: appointment_change_error
      ///
      /// Locales: en, ru
      var appointment_change_error: RswiftResources.StringResource { .init(key: "appointment_change_error", tableName: "Errors", source: source, developmentValue: "Appointment change error", comment: nil) }

      /// en translation: Appointment creation error
      ///
      /// Key: appointment_creation_error
      ///
      /// Locales: en, ru
      var appointment_creation_error: RswiftResources.StringResource { .init(key: "appointment_creation_error", tableName: "Errors", source: source, developmentValue: "Appointment creation error", comment: nil) }

      /// en translation: An error occurred while deleting an entry
      ///
      /// Key: appointment_not_found
      ///
      /// Locales: en, ru
      var appointment_not_found: RswiftResources.StringResource { .init(key: "appointment_not_found", tableName: "Errors", source: source, developmentValue: "An error occurred while deleting an entry", comment: nil) }

      /// en translation: Appointment status change error
      ///
      /// Key: appointment_status_change_error
      ///
      /// Locales: en, ru
      var appointment_status_change_error: RswiftResources.StringResource { .init(key: "appointment_status_change_error", tableName: "Errors", source: source, developmentValue: "Appointment status change error", comment: nil) }

      /// en translation: Appointments loading error
      ///
      /// Key: appointments_loading_error
      ///
      /// Locales: en, ru
      var appointments_loading_error: RswiftResources.StringResource { .init(key: "appointments_loading_error", tableName: "Errors", source: source, developmentValue: "Appointments loading error", comment: nil) }

      /// en translation: User with such e-mail already exists
      ///
      /// Key: conflicting_credentials
      ///
      /// Locales: en, ru
      var conflicting_credentials: RswiftResources.StringResource { .init(key: "conflicting_credentials", tableName: "Errors", source: source, developmentValue: "User with such e-mail already exists", comment: nil) }

      /// en translation: You've provided different passwords. Please make sure they are equal
      ///
      /// Key: different_passwords
      ///
      /// Locales: en, ru
      var different_passwords: RswiftResources.StringResource { .init(key: "different_passwords", tableName: "Errors", source: source, developmentValue: "You've provided different passwords. Please make sure they are equal", comment: nil) }

      /// en translation: Client name must not be empty
      ///
      /// Key: empty_client_name
      ///
      /// Locales: en, ru
      var empty_client_name: RswiftResources.StringResource { .init(key: "empty_client_name", tableName: "Errors", source: source, developmentValue: "Client name must not be empty", comment: nil) }

      /// en translation: Please confirm password to continue
      ///
      /// Key: empty_confirm_password
      ///
      /// Locales: en, ru
      var empty_confirm_password: RswiftResources.StringResource { .init(key: "empty_confirm_password", tableName: "Errors", source: source, developmentValue: "Please confirm password to continue", comment: nil) }

      /// en translation: Please enter e-mail to continue
      ///
      /// Key: empty_email
      ///
      /// Locales: en, ru
      var empty_email: RswiftResources.StringResource { .init(key: "empty_email", tableName: "Errors", source: source, developmentValue: "Please enter e-mail to continue", comment: nil) }

      /// en translation: Please enter first name to continue
      ///
      /// Key: empty_first_name
      ///
      /// Locales: en, ru
      var empty_first_name: RswiftResources.StringResource { .init(key: "empty_first_name", tableName: "Errors", source: source, developmentValue: "Please enter first name to continue", comment: nil) }

      /// en translation: Please enter last name to continue
      ///
      /// Key: empty_last_name
      ///
      /// Locales: en, ru
      var empty_last_name: RswiftResources.StringResource { .init(key: "empty_last_name", tableName: "Errors", source: source, developmentValue: "Please enter last name to continue", comment: nil) }

      /// en translation: Please enter password to continue
      ///
      /// Key: empty_password
      ///
      /// Locales: en, ru
      var empty_password: RswiftResources.StringResource { .init(key: "empty_password", tableName: "Errors", source: source, developmentValue: "Please enter password to continue", comment: nil) }

      /// en translation: The field with the duration of the service is required to fill in
      ///
      /// Key: empty_service_duration
      ///
      /// Locales: en, ru
      var empty_service_duration: RswiftResources.StringResource { .init(key: "empty_service_duration", tableName: "Errors", source: source, developmentValue: "The field with the duration of the service is required to fill in", comment: nil) }

      /// en translation: The field with the name of the service must be filled in
      ///
      /// Key: empty_service_name
      ///
      /// Locales: en, ru
      var empty_service_name: RswiftResources.StringResource { .init(key: "empty_service_name", tableName: "Errors", source: source, developmentValue: "The field with the name of the service must be filled in", comment: nil) }

      /// en translation: The price field must be filled in
      ///
      /// Key: empty_service_price
      ///
      /// Locales: en, ru
      var empty_service_price: RswiftResources.StringResource { .init(key: "empty_service_price", tableName: "Errors", source: source, developmentValue: "The price field must be filled in", comment: nil) }

      /// en translation: You've got no rights to perform this operation
      ///
      /// Key: forbidden_access
      ///
      /// Locales: en, ru
      var forbidden_access: RswiftResources.StringResource { .init(key: "forbidden_access", tableName: "Errors", source: source, developmentValue: "You've got no rights to perform this operation", comment: nil) }

      /// en translation: Either your e-mail or password are incorrect
      ///
      /// Key: invalid_credentials
      ///
      /// Locales: en, ru
      var invalid_credentials: RswiftResources.StringResource { .init(key: "invalid_credentials", tableName: "Errors", source: source, developmentValue: "Either your e-mail or password are incorrect", comment: nil) }

      /// en translation: Your email does not conform to default email pattern
      ///
      /// Key: invalid_email
      ///
      /// Locales: en, ru
      var invalid_email: RswiftResources.StringResource { .init(key: "invalid_email", tableName: "Errors", source: source, developmentValue: "Your email does not conform to default email pattern", comment: nil) }

      /// en translation: Password should contain at least one uppercase, one lowercase letter and one digit. The password should be at least 6 characters long
      ///
      /// Key: invalid_password
      ///
      /// Locales: en, ru
      var invalid_password: RswiftResources.StringResource { .init(key: "invalid_password", tableName: "Errors", source: source, developmentValue: "Password should contain at least one uppercase, one lowercase letter and one digit. The password should be at least 6 characters long", comment: nil) }

      /// en translation: Invalid phone number format
      ///
      /// Key: invalid_phone_number
      ///
      /// Locales: en, ru
      var invalid_phone_number: RswiftResources.StringResource { .init(key: "invalid_phone_number", tableName: "Errors", source: source, developmentValue: "Invalid phone number format", comment: nil) }

      /// en translation: Login error
      ///
      /// Key: login_error
      ///
      /// Locales: en, ru
      var login_error: RswiftResources.StringResource { .init(key: "login_error", tableName: "Errors", source: source, developmentValue: "Login error", comment: nil) }

      /// en translation: Internal application error. Please contact developer
      ///
      /// Key: model_error
      ///
      /// Locales: en, ru
      var model_error: RswiftResources.StringResource { .init(key: "model_error", tableName: "Errors", source: source, developmentValue: "Internal application error. Please contact developer", comment: nil) }

      /// en translation: The old password entered is incorrect
      ///
      /// Key: not_correct_old_password
      ///
      /// Locales: en, ru
      var not_correct_old_password: RswiftResources.StringResource { .init(key: "not_correct_old_password", tableName: "Errors", source: source, developmentValue: "The old password entered is incorrect", comment: nil) }

      /// en translation: Unfortunately, an error occurred on the server. Your subscription was not found, please try again
      ///
      /// Key: not_fount_subscribe
      ///
      /// Locales: en, ru
      var not_fount_subscribe: RswiftResources.StringResource { .init(key: "not_fount_subscribe", tableName: "Errors", source: source, developmentValue: "Unfortunately, an error occurred on the server. Your subscription was not found, please try again", comment: nil) }

      /// en translation: Incorrect price format. The price must be a positive integer or decimal number
      ///
      /// Key: not_valid_price
      ///
      /// Locales: en, ru
      var not_valid_price: RswiftResources.StringResource { .init(key: "not_valid_price", tableName: "Errors", source: source, developmentValue: "Incorrect price format. The price must be a positive integer or decimal number", comment: nil) }

      /// en translation: Ok
      ///
      /// Key: ok
      ///
      /// Locales: en, ru
      var ok: RswiftResources.StringResource { .init(key: "ok", tableName: "Errors", source: source, developmentValue: "Ok", comment: nil) }

      /// en translation: Password change error
      ///
      /// Key: password_changed_error
      ///
      /// Locales: en, ru
      var password_changed_error: RswiftResources.StringResource { .init(key: "password_changed_error", tableName: "Errors", source: source, developmentValue: "Password change error", comment: nil) }

      /// en translation: Profile picture not found
      ///
      /// Key: photo_not_found
      ///
      /// Locales: en, ru
      var photo_not_found: RswiftResources.StringResource { .init(key: "photo_not_found", tableName: "Errors", source: source, developmentValue: "Profile picture not found", comment: nil) }

      /// en translation: Register error
      ///
      /// Key: register_error
      ///
      /// Locales: en, ru
      var register_error: RswiftResources.StringResource { .init(key: "register_error", tableName: "Errors", source: source, developmentValue: "Register error", comment: nil) }

      /// en translation: Some server error occured. Please try again later
      ///
      /// Key: server_error
      ///
      /// Locales: en, ru
      var server_error: RswiftResources.StringResource { .init(key: "server_error", tableName: "Errors", source: source, developmentValue: "Some server error occured. Please try again later", comment: nil) }

      /// en translation: Error loading services
      ///
      /// Key: services_loading_error
      ///
      /// Locales: en, ru
      var services_loading_error: RswiftResources.StringResource { .init(key: "services_loading_error", tableName: "Errors", source: source, developmentValue: "Error loading services", comment: nil) }

      /// en translation: Your authentication token is expired. Please login again
      ///
      /// Key: unauthorized
      ///
      /// Locales: en, ru
      var unauthorized: RswiftResources.StringResource { .init(key: "unauthorized", tableName: "Errors", source: source, developmentValue: "Your authentication token is expired. Please login again", comment: nil) }

      /// en translation: Some unexpected error occured. Please contact developer
      ///
      /// Key: unexpected_error
      ///
      /// Locales: en, ru
      var unexpected_error: RswiftResources.StringResource { .init(key: "unexpected_error", tableName: "Errors", source: source, developmentValue: "Some unexpected error occured. Please contact developer", comment: nil) }
    }

    /// This `_R.string.filterScreen` struct is generated, and contains static references to 10 localization keys.
    struct filterScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: By date:
      ///
      /// Key: by_date
      ///
      /// Locales: en, ru
      var by_date: RswiftResources.StringResource { .init(key: "by_date", tableName: "FilterScreen", source: source, developmentValue: "By date:", comment: nil) }

      /// en translation: By price:
      ///
      /// Key: by_price
      ///
      /// Locales: en, ru
      var by_price: RswiftResources.StringResource { .init(key: "by_price", tableName: "FilterScreen", source: source, developmentValue: "By price:", comment: nil) }

      /// en translation: Choose services for filtration
      ///
      /// Key: choose_services_for_filtration
      ///
      /// Locales: en, ru
      var choose_services_for_filtration: RswiftResources.StringResource { .init(key: "choose_services_for_filtration", tableName: "FilterScreen", source: source, developmentValue: "Choose services for filtration", comment: nil) }

      /// en translation: Enter date
      ///
      /// Key: enter_date
      ///
      /// Locales: en, ru
      var enter_date: RswiftResources.StringResource { .init(key: "enter_date", tableName: "FilterScreen", source: source, developmentValue: "Enter date", comment: nil) }

      /// en translation: Enter price
      ///
      /// Key: enter_price
      ///
      /// Locales: en, ru
      var enter_price: RswiftResources.StringResource { .init(key: "enter_price", tableName: "FilterScreen", source: source, developmentValue: "Enter price", comment: nil) }

      /// en translation: Filters
      ///
      /// Key: filters
      ///
      /// Locales: en, ru
      var filters: RswiftResources.StringResource { .init(key: "filters", tableName: "FilterScreen", source: source, developmentValue: "Filters", comment: nil) }

      /// en translation: From:
      ///
      /// Key: from
      ///
      /// Locales: en, ru
      var from: RswiftResources.StringResource { .init(key: "from", tableName: "FilterScreen", source: source, developmentValue: "From:", comment: nil) }

      /// en translation: Save
      ///
      /// Key: save
      ///
      /// Locales: en, ru
      var save: RswiftResources.StringResource { .init(key: "save", tableName: "FilterScreen", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Sorting
      ///
      /// Key: sorting
      ///
      /// Locales: en, ru
      var sorting: RswiftResources.StringResource { .init(key: "sorting", tableName: "FilterScreen", source: source, developmentValue: "Sorting", comment: nil) }

      /// en translation: To:
      ///
      /// Key: to
      ///
      /// Locales: en, ru
      var to: RswiftResources.StringResource { .init(key: "to", tableName: "FilterScreen", source: source, developmentValue: "To:", comment: nil) }
    }

    /// This `_R.string.informationSubcscribeSheetScreen` struct is generated, and contains static references to 5 localization keys.
    struct informationSubcscribeSheetScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Cancel subscription
      ///
      /// Key: cancel_subscription
      ///
      /// Locales: en, ru
      var cancel_subscription: RswiftResources.StringResource { .init(key: "cancel_subscription", tableName: "InformationSubcscribeSheetScreen", source: source, developmentValue: "Cancel subscription", comment: nil) }

      /// en translation: The subscription has been issued: 
      ///
      /// Key: start_date_subscribe
      ///
      /// Locales: en, ru
      var start_date_subscribe: RswiftResources.StringResource { .init(key: "start_date_subscribe", tableName: "InformationSubcscribeSheetScreen", source: source, developmentValue: "The subscription has been issued: ", comment: nil) }

      /// en translation: subscribe
      ///
      /// Key: subscribe
      ///
      /// Locales: en, ru
      var subscribe: RswiftResources.StringResource { .init(key: "subscribe", tableName: "InformationSubcscribeSheetScreen", source: source, developmentValue: "subscribe", comment: nil) }

      /// en translation: You don't have a subscription yet. Make out soon
      ///
      /// Key: there_is_not_subscribe
      ///
      /// Locales: en, ru
      var there_is_not_subscribe: RswiftResources.StringResource { .init(key: "there_is_not_subscribe", tableName: "InformationSubcscribeSheetScreen", source: source, developmentValue: "You don't have a subscription yet. Make out soon", comment: nil) }

      /// en translation: Subscription Information
      ///
      /// Key: title_screen
      ///
      /// Locales: en, ru
      var title_screen: RswiftResources.StringResource { .init(key: "title_screen", tableName: "InformationSubcscribeSheetScreen", source: source, developmentValue: "Subscription Information", comment: nil) }
    }

    /// This `_R.string.loginScreen` struct is generated, and contains static references to 5 localization keys.
    struct loginScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Register
      ///
      /// Key: have_not_account
      ///
      /// Locales: en, ru
      var have_not_account: RswiftResources.StringResource { .init(key: "have_not_account", tableName: "LoginScreen", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Enter email
      ///
      /// Key: input_email
      ///
      /// Locales: en, ru
      var input_email: RswiftResources.StringResource { .init(key: "input_email", tableName: "LoginScreen", source: source, developmentValue: "Enter email", comment: nil) }

      /// en translation: Enter the password
      ///
      /// Key: input_password
      ///
      /// Locales: en, ru
      var input_password: RswiftResources.StringResource { .init(key: "input_password", tableName: "LoginScreen", source: source, developmentValue: "Enter the password", comment: nil) }

      /// en translation: Log in
      ///
      /// Key: login
      ///
      /// Locales: en, ru
      var login: RswiftResources.StringResource { .init(key: "login", tableName: "LoginScreen", source: source, developmentValue: "Log in", comment: nil) }

      /// en translation: Welcome back!
      ///
      /// Key: repeat_greeting
      ///
      /// Locales: en, ru
      var repeat_greeting: RswiftResources.StringResource { .init(key: "repeat_greeting", tableName: "LoginScreen", source: source, developmentValue: "Welcome back!", comment: nil) }
    }

    /// This `_R.string.profileScreen` struct is generated, and contains static references to 18 localization keys.
    struct profileScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Cancel
      ///
      /// Key: cancel
      ///
      /// Locales: en, ru
      var cancel: RswiftResources.StringResource { .init(key: "cancel", tableName: "ProfileScreen", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Change data
      ///
      /// Key: change_data
      ///
      /// Locales: en, ru
      var change_data: RswiftResources.StringResource { .init(key: "change_data", tableName: "ProfileScreen", source: source, developmentValue: "Change data", comment: nil) }

      /// en translation: Change password
      ///
      /// Key: change_password
      ///
      /// Locales: en, ru
      var change_password: RswiftResources.StringResource { .init(key: "change_password", tableName: "ProfileScreen", source: source, developmentValue: "Change password", comment: nil) }

      /// en translation: edit photo
      ///
      /// Key: change_photo
      ///
      /// Locales: en, ru
      var change_photo: RswiftResources.StringResource { .init(key: "change_photo", tableName: "ProfileScreen", source: source, developmentValue: "edit photo", comment: nil) }

      /// en translation: delete a photo
      ///
      /// Key: delete_photo
      ///
      /// Locales: en, ru
      var delete_photo: RswiftResources.StringResource { .init(key: "delete_photo", tableName: "ProfileScreen", source: source, developmentValue: "delete a photo", comment: nil) }

      /// en translation: Email: 
      ///
      /// Key: email
      ///
      /// Locales: en, ru
      var email: RswiftResources.StringResource { .init(key: "email", tableName: "ProfileScreen", source: source, developmentValue: "Email: ", comment: nil) }

      /// en translation: Input your name
      ///
      /// Key: input_name
      ///
      /// Locales: en, ru
      var input_name: RswiftResources.StringResource { .init(key: "input_name", tableName: "ProfileScreen", source: source, developmentValue: "Input your name", comment: nil) }

      /// en translation: Enter the new password
      ///
      /// Key: input_new_password
      ///
      /// Locales: en, ru
      var input_new_password: RswiftResources.StringResource { .init(key: "input_new_password", tableName: "ProfileScreen", source: source, developmentValue: "Enter the new password", comment: nil) }

      /// en translation: Enter the old password
      ///
      /// Key: input_old_password
      ///
      /// Locales: en, ru
      var input_old_password: RswiftResources.StringResource { .init(key: "input_old_password", tableName: "ProfileScreen", source: source, developmentValue: "Enter the old password", comment: nil) }

      /// en translation: Input your phone
      ///
      /// Key: input_phone
      ///
      /// Locales: en, ru
      var input_phone: RswiftResources.StringResource { .init(key: "input_phone", tableName: "ProfileScreen", source: source, developmentValue: "Input your phone", comment: nil) }

      /// en translation: To change the password, you must enter the old and new password
      ///
      /// Key: message_alert_change_password
      ///
      /// Locales: en, ru
      var message_alert_change_password: RswiftResources.StringResource { .init(key: "message_alert_change_password", tableName: "ProfileScreen", source: source, developmentValue: "To change the password, you must enter the old and new password", comment: nil) }

      /// en translation: Phone: 
      ///
      /// Key: phone
      ///
      /// Locales: en, ru
      var phone: RswiftResources.StringResource { .init(key: "phone", tableName: "ProfileScreen", source: source, developmentValue: "Phone: ", comment: nil) }

      /// en translation: Save
      ///
      /// Key: save
      ///
      /// Locales: en, ru
      var save: RswiftResources.StringResource { .init(key: "save", tableName: "ProfileScreen", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Log out
      ///
      /// Key: sign_out
      ///
      /// Locales: en, ru
      var sign_out: RswiftResources.StringResource { .init(key: "sign_out", tableName: "ProfileScreen", source: source, developmentValue: "Log out", comment: nil) }

      /// en translation: Profile photo successfully deleted
      ///
      /// Key: success_deleted_avatar
      ///
      /// Locales: en, ru
      var success_deleted_avatar: RswiftResources.StringResource { .init(key: "success_deleted_avatar", tableName: "ProfileScreen", source: source, developmentValue: "Profile photo successfully deleted", comment: nil) }

      /// en translation: Password change was successful
      ///
      /// Key: susscess_change_password
      ///
      /// Locales: en, ru
      var susscess_change_password: RswiftResources.StringResource { .init(key: "susscess_change_password", tableName: "ProfileScreen", source: source, developmentValue: "Password change was successful", comment: nil) }

      /// en translation: Changing the password
      ///
      /// Key: title_alert_change_password
      ///
      /// Locales: en, ru
      var title_alert_change_password: RswiftResources.StringResource { .init(key: "title_alert_change_password", tableName: "ProfileScreen", source: source, developmentValue: "Changing the password", comment: nil) }

      /// en translation: Input data
      ///
      /// Key: title_alert_input_data
      ///
      /// Locales: en, ru
      var title_alert_input_data: RswiftResources.StringResource { .init(key: "title_alert_input_data", tableName: "ProfileScreen", source: source, developmentValue: "Input data", comment: nil) }
    }

    /// This `_R.string.registerScreen` struct is generated, and contains static references to 10 localization keys.
    struct registerScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Welcome!
      ///
      /// Key: first_greeting
      ///
      /// Locales: en, ru
      var first_greeting: RswiftResources.StringResource { .init(key: "first_greeting", tableName: "RegisterScreen", source: source, developmentValue: "Welcome!", comment: nil) }

      /// en translation: I already have an account
      ///
      /// Key: have_account
      ///
      /// Locales: en, ru
      var have_account: RswiftResources.StringResource { .init(key: "have_account", tableName: "RegisterScreen", source: source, developmentValue: "I already have an account", comment: nil) }

      /// en translation: Enter email*
      ///
      /// Key: input_email
      ///
      /// Locales: en, ru
      var input_email: RswiftResources.StringResource { .init(key: "input_email", tableName: "RegisterScreen", source: source, developmentValue: "Enter email*", comment: nil) }

      /// en translation: Enter your name*
      ///
      /// Key: input_firstname
      ///
      /// Locales: en, ru
      var input_firstname: RswiftResources.StringResource { .init(key: "input_firstname", tableName: "RegisterScreen", source: source, developmentValue: "Enter your name*", comment: nil) }

      /// en translation: Enter your last name*
      ///
      /// Key: input_lastname
      ///
      /// Locales: en, ru
      var input_lastname: RswiftResources.StringResource { .init(key: "input_lastname", tableName: "RegisterScreen", source: source, developmentValue: "Enter your last name*", comment: nil) }

      /// en translation: Enter the password*
      ///
      /// Key: input_password
      ///
      /// Locales: en, ru
      var input_password: RswiftResources.StringResource { .init(key: "input_password", tableName: "RegisterScreen", source: source, developmentValue: "Enter the password*", comment: nil) }

      /// en translation: Enter your patronymic
      ///
      /// Key: input_patronymic
      ///
      /// Locales: en, ru
      var input_patronymic: RswiftResources.StringResource { .init(key: "input_patronymic", tableName: "RegisterScreen", source: source, developmentValue: "Enter your patronymic", comment: nil) }

      /// en translation: Enter your phone number
      ///
      /// Key: input_phone_number
      ///
      /// Locales: en, ru
      var input_phone_number: RswiftResources.StringResource { .init(key: "input_phone_number", tableName: "RegisterScreen", source: source, developmentValue: "Enter your phone number", comment: nil) }

      /// en translation: Repeat the password*
      ///
      /// Key: input_repeat_password
      ///
      /// Locales: en, ru
      var input_repeat_password: RswiftResources.StringResource { .init(key: "input_repeat_password", tableName: "RegisterScreen", source: source, developmentValue: "Repeat the password*", comment: nil) }

      /// en translation: Register
      ///
      /// Key: register
      ///
      /// Locales: en, ru
      var register: RswiftResources.StringResource { .init(key: "register", tableName: "RegisterScreen", source: source, developmentValue: "Register", comment: nil) }
    }

    /// This `_R.string.searchScreen` struct is generated, and contains static references to 1 localization keys.
    struct searchScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Enter client name
      ///
      /// Key: enter_client_name
      ///
      /// Locales: en, ru
      var enter_client_name: RswiftResources.StringResource { .init(key: "enter_client_name", tableName: "SearchScreen", source: source, developmentValue: "Enter client name", comment: nil) }
    }

    /// This `_R.string.serviceSelectionScreen` struct is generated, and contains static references to 1 localization keys.
    struct serviceSelectionScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Choose service
      ///
      /// Key: choose_service
      ///
      /// Locales: en, ru
      var choose_service: RswiftResources.StringResource { .init(key: "choose_service", tableName: "ServiceSelectionScreen", source: source, developmentValue: "Choose service", comment: nil) }
    }

    /// This `_R.string.settingsScreen` struct is generated, and contains static references to 3 localization keys.
    struct settingsScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Subscription information
      ///
      /// Key: information_subscribe
      ///
      /// Locales: en, ru
      var information_subscribe: RswiftResources.StringResource { .init(key: "information_subscribe", tableName: "SettingsScreen", source: source, developmentValue: "Subscription information", comment: nil) }

      /// en translation: View my services
      ///
      /// Key: show_services
      ///
      /// Locales: en, ru
      var show_services: RswiftResources.StringResource { .init(key: "show_services", tableName: "SettingsScreen", source: source, developmentValue: "View my services", comment: nil) }

      /// en translation: Setup
      ///
      /// Key: title_screen
      ///
      /// Locales: en, ru
      var title_screen: RswiftResources.StringResource { .init(key: "title_screen", tableName: "SettingsScreen", source: source, developmentValue: "Setup", comment: nil) }
    }

    /// This `_R.string.startScreen` struct is generated, and contains static references to 2 localization keys.
    struct startScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Go for it
      ///
      /// Key: go
      ///
      /// Locales: en, ru
      var go: RswiftResources.StringResource { .init(key: "go", tableName: "StartScreen", source: source, developmentValue: "Go for it", comment: nil) }

      /// en translation: Plan your workday with comfort
      ///
      /// Key: greeting_phrase
      ///
      /// Locales: en, ru
      var greeting_phrase: RswiftResources.StringResource { .init(key: "greeting_phrase", tableName: "StartScreen", source: source, developmentValue: "Plan your workday with comfort", comment: nil) }
    }

    /// This `_R.string.yourServicesViewScreen` struct is generated, and contains static references to 14 localization keys.
    struct yourServicesViewScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Cancel
      ///
      /// Key: cancel
      ///
      /// Locales: en, ru
      var cancel: RswiftResources.StringResource { .init(key: "cancel", tableName: "YourServicesViewScreen", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Select an action
      ///
      /// Key: choose_action
      ///
      /// Locales: en, ru
      var choose_action: RswiftResources.StringResource { .init(key: "choose_action", tableName: "YourServicesViewScreen", source: source, developmentValue: "Select an action", comment: nil) }

      /// en translation: Choose the duration of the service*
      ///
      /// Key: choose_duration_service
      ///
      /// Locales: en, ru
      var choose_duration_service: RswiftResources.StringResource { .init(key: "choose_duration_service", tableName: "YourServicesViewScreen", source: source, developmentValue: "Choose the duration of the service*", comment: nil) }

      /// en translation: Create service
      ///
      /// Key: create_service
      ///
      /// Locales: en, ru
      var create_service: RswiftResources.StringResource { .init(key: "create_service", tableName: "YourServicesViewScreen", source: source, developmentValue: "Create service", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: delete
      ///
      /// Locales: en, ru
      var delete: RswiftResources.StringResource { .init(key: "delete", tableName: "YourServicesViewScreen", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Edit
      ///
      /// Key: edit
      ///
      /// Locales: en, ru
      var edit: RswiftResources.StringResource { .init(key: "edit", tableName: "YourServicesViewScreen", source: source, developmentValue: "Edit", comment: nil) }

      /// en translation: Editing service
      ///
      /// Key: edit_service
      ///
      /// Locales: en, ru
      var edit_service: RswiftResources.StringResource { .init(key: "edit_service", tableName: "YourServicesViewScreen", source: source, developmentValue: "Editing service", comment: nil) }

      /// en translation: You can edit or delete a service
      ///
      /// Key: information_actions
      ///
      /// Locales: en, ru
      var information_actions: RswiftResources.StringResource { .init(key: "information_actions", tableName: "YourServicesViewScreen", source: source, developmentValue: "You can edit or delete a service", comment: nil) }

      /// en translation: Enter the name of the service*
      ///
      /// Key: input_name_service
      ///
      /// Locales: en, ru
      var input_name_service: RswiftResources.StringResource { .init(key: "input_name_service", tableName: "YourServicesViewScreen", source: source, developmentValue: "Enter the name of the service*", comment: nil) }

      /// en translation: Enter the price of the service*
      ///
      /// Key: input_price_service
      ///
      /// Locales: en, ru
      var input_price_service: RswiftResources.StringResource { .init(key: "input_price_service", tableName: "YourServicesViewScreen", source: source, developmentValue: "Enter the price of the service*", comment: nil) }

      /// en translation: Save
      ///
      /// Key: save
      ///
      /// Locales: en, ru
      var save: RswiftResources.StringResource { .init(key: "save", tableName: "YourServicesViewScreen", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: You don't have any services yet
      ///
      /// Key: there_is_not_services
      ///
      /// Locales: en, ru
      var there_is_not_services: RswiftResources.StringResource { .init(key: "there_is_not_services", tableName: "YourServicesViewScreen", source: source, developmentValue: "You don't have any services yet", comment: nil) }

      /// en translation: You cannot create your own services! Subscription is required
      ///
      /// Key: there_is_not_subscribe
      ///
      /// Locales: en, ru
      var there_is_not_subscribe: RswiftResources.StringResource { .init(key: "there_is_not_subscribe", tableName: "YourServicesViewScreen", source: source, developmentValue: "You cannot create your own services! Subscription is required", comment: nil) }

      /// en translation: Your services
      ///
      /// Key: title_screen
      ///
      /// Locales: en, ru
      var title_screen: RswiftResources.StringResource { .init(key: "title_screen", tableName: "YourServicesViewScreen", source: source, developmentValue: "Your services", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 13 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `AuthPlaceholderTextFieldColor`.
    var authPlaceholderTextFieldColor: RswiftResources.ColorResource { .init(name: "AuthPlaceholderTextFieldColor", path: [], bundle: bundle) }

    /// Color `AuthTextFieldColor`.
    var authTextFieldColor: RswiftResources.ColorResource { .init(name: "AuthTextFieldColor", path: [], bundle: bundle) }

    /// Color `Black`.
    var black: RswiftResources.ColorResource { .init(name: "Black", path: [], bundle: bundle) }

    /// Color `BrightRed`.
    var brightRed: RswiftResources.ColorResource { .init(name: "BrightRed", path: [], bundle: bundle) }

    /// Color `Clear`.
    var clear: RswiftResources.ColorResource { .init(name: "Clear", path: [], bundle: bundle) }

    /// Color `DarkOrange`.
    var darkOrange: RswiftResources.ColorResource { .init(name: "DarkOrange", path: [], bundle: bundle) }

    /// Color `SoftBrown`.
    var softBrown: RswiftResources.ColorResource { .init(name: "SoftBrown", path: [], bundle: bundle) }

    /// Color `SoftWhite`.
    var softWhite: RswiftResources.ColorResource { .init(name: "SoftWhite", path: [], bundle: bundle) }

    /// Color `TextButtonColor`.
    var textButtonColor: RswiftResources.ColorResource { .init(name: "TextButtonColor", path: [], bundle: bundle) }

    /// Color `TransparentWhite`.
    var transparentWhite: RswiftResources.ColorResource { .init(name: "TransparentWhite", path: [], bundle: bundle) }

    /// Color `Vinous`.
    var vinous: RswiftResources.ColorResource { .init(name: "Vinous", path: [], bundle: bundle) }

    /// Color `White`.
    var white: RswiftResources.ColorResource { .init(name: "White", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 35 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Arrow`.
    var arrow: RswiftResources.ImageResource { .init(name: "Arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ArrowBackSheet`.
    var arrowBackSheet: RswiftResources.ImageResource { .init(name: "ArrowBackSheet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BackArrow`.
    var backArrow: RswiftResources.ImageResource { .init(name: "BackArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Background1`.
    var background1: RswiftResources.ImageResource { .init(name: "Background1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Background2`.
    var background2: RswiftResources.ImageResource { .init(name: "Background2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ChillImage`.
    var chillImage: RswiftResources.ImageResource { .init(name: "ChillImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DateField`.
    var dateField: RswiftResources.ImageResource { .init(name: "DateField", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DefaultAvatar`.
    var defaultAvatar: RswiftResources.ImageResource { .init(name: "DefaultAvatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Filter`.
    var filter: RswiftResources.ImageResource { .init(name: "Filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FirstBackground`.
    var firstBackground: RswiftResources.ImageResource { .init(name: "FirstBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ForwardArrow`.
    var forwardArrow: RswiftResources.ImageResource { .init(name: "ForwardArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `GreetingImage`.
    var greetingImage: RswiftResources.ImageResource { .init(name: "GreetingImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `HidePassword`.
    var hidePassword: RswiftResources.ImageResource { .init(name: "HidePassword", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchScreen`.
    var launchScreen: RswiftResources.ImageResource { .init(name: "LaunchScreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LeftCircleElement`.
    var leftCircleElement: RswiftResources.ImageResource { .init(name: "LeftCircleElement", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LeftLines`.
    var leftLines: RswiftResources.ImageResource { .init(name: "LeftLines", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Logo`.
    var logo: RswiftResources.ImageResource { .init(name: "Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `NotServices`.
    var notServices: RswiftResources.ImageResource { .init(name: "NotServices", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `NotSubscribe`.
    var notSubscribe: RswiftResources.ImageResource { .init(name: "NotSubscribe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PlusNote`.
    var plusNote: RswiftResources.ImageResource { .init(name: "PlusNote", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PlusService`.
    var plusService: RswiftResources.ImageResource { .init(name: "PlusService", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RightCircleElement`.
    var rightCircleElement: RswiftResources.ImageResource { .init(name: "RightCircleElement", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RightLines`.
    var rightLines: RswiftResources.ImageResource { .init(name: "RightLines", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SecondBackground`.
    var secondBackground: RswiftResources.ImageResource { .init(name: "SecondBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SelectedHouse`.
    var selectedHouse: RswiftResources.ImageResource { .init(name: "SelectedHouse", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SelectedPerson`.
    var selectedPerson: RswiftResources.ImageResource { .init(name: "SelectedPerson", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SelectedSearch`.
    var selectedSearch: RswiftResources.ImageResource { .init(name: "SelectedSearch", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SelectedSettings`.
    var selectedSettings: RswiftResources.ImageResource { .init(name: "SelectedSettings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ServiceTagBackground`.
    var serviceTagBackground: RswiftResources.ImageResource { .init(name: "ServiceTagBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ShowPassword`.
    var showPassword: RswiftResources.ImageResource { .init(name: "ShowPassword", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `TextFieldBackground`.
    var textFieldBackground: RswiftResources.ImageResource { .init(name: "TextFieldBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `UnselectedHouse`.
    var unselectedHouse: RswiftResources.ImageResource { .init(name: "UnselectedHouse", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `UnselectedPerson`.
    var unselectedPerson: RswiftResources.ImageResource { .init(name: "UnselectedPerson", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `UnselectedSearch`.
    var unselectedSearch: RswiftResources.ImageResource { .init(name: "UnselectedSearch", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `UnselectedSettings`.
    var unselectedSettings: RswiftResources.ImageResource { .init(name: "UnselectedSettings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Raleway-Bold`.
    var ralewayBold: RswiftResources.FontResource { .init(name: "Raleway-Bold", bundle: bundle, filename: "Raleway-Bold.ttf") }

    /// Font `Raleway-Regular`.
    var ralewayRegular: RswiftResources.FontResource { .init(name: "Raleway-Regular", bundle: bundle, filename: "Raleway-Regular.ttf") }

    /// Font `RedHatDisplay-Black`.
    var redHatDisplayBlack: RswiftResources.FontResource { .init(name: "RedHatDisplay-Black", bundle: bundle, filename: "RedHatDisplay-Black.ttf") }

    /// Font `RedHatDisplay-Medium`.
    var redHatDisplayMedium: RswiftResources.FontResource { .init(name: "RedHatDisplay-Medium", bundle: bundle, filename: "RedHatDisplay-Medium.ttf") }

    /// Font `RedHatDisplay-Regular`.
    var redHatDisplayRegular: RswiftResources.FontResource { .init(name: "RedHatDisplay-Regular", bundle: bundle, filename: "RedHatDisplay-Regular.ttf") }

    /// Font `RedHatDisplay-SemiBold`.
    var redHatDisplaySemiBold: RswiftResources.FontResource { .init(name: "RedHatDisplay-SemiBold", bundle: bundle, filename: "RedHatDisplay-SemiBold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [ralewayBold, ralewayRegular, redHatDisplayBlack, redHatDisplayMedium, redHatDisplayRegular, redHatDisplaySemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 6 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Raleway-Bold.ttf`.
    var ralewayBoldTtf: RswiftResources.FileResource { .init(name: "Raleway-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Raleway-Regular.ttf`.
    var ralewayRegularTtf: RswiftResources.FileResource { .init(name: "Raleway-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `RedHatDisplay-Black.ttf`.
    var redHatDisplayBlackTtf: RswiftResources.FileResource { .init(name: "RedHatDisplay-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `RedHatDisplay-Medium.ttf`.
    var redHatDisplayMediumTtf: RswiftResources.FileResource { .init(name: "RedHatDisplay-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `RedHatDisplay-Regular.ttf`.
    var redHatDisplayRegularTtf: RswiftResources.FileResource { .init(name: "RedHatDisplay-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `RedHatDisplay-SemiBold.ttf`.
    var redHatDisplaySemiBoldTtf: RswiftResources.FileResource { .init(name: "RedHatDisplay-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "LaunchScreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'LaunchScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}